#include <gtkmm.h>

#include <iostream>
#include <filesystem>

#include <TemplateManager.hpp>
#include <SystemHelper.hpp>
#include <FileSystemManager.hpp>
#include <ContestStructureBuilder.hpp>

namespace fs = std::filesystem;
using namespace std;

class MainWindow : public Gtk::Window {

public: 
    /**
     * @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞.
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î UI —Ç–∞ –ø—ñ–¥–∫–ª—é—á–∞—î —Å–∏–≥–Ω–∞–ª–∏
     */
    MainWindow() {
        connectSignals();
        setupUI();
    }

private:
    static constexpr int WINDOW_WIDTH = 250;
    static constexpr int WINDOW_HEIGHT = 100;
    static constexpr int DEFAULT_COMBO_SELECTION = 4; // E (5 problems)

    // Layout
    Gtk::Box vbox{Gtk::ORIENTATION_VERTICAL};

    // Contest name
    Gtk::Label contestNameLabel{"–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–Ω—Ç–µ—Å—Ç—É:"};
    Gtk::Entry contestNameEntry;

    // Problem count
    Gtk::Label problemCountLabel{"–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–¥–∞—á:"};
    Gtk::ComboBoxText problemCountSelector;

    // Directory path
    Gtk::Label directoryLabel{"–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É:"};
    Gtk::Button directoryPicker{"–û–±—Ä–∞—Ç–∏ –ø–∞–ø–∫—É"};
    string folderName;

    // Checkboxes
    Gtk::CheckButton openInVSCodeOption{"–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Code"};
    Gtk::CheckButton initGitRepoOption{"–°—Ç–≤–æ—Ä–∏—Ç–∏ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π"};

    // Create
    Gtk::Button createButton{"–°—Ç–≤–æ—Ä–∏—Ç–∏"};

    /**
     * @brief –ù–∞–ª–∞—à—Ç–æ–≤—É—î UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ç–∞ –¥–æ–¥–∞—î —ó—Ö —É –≥–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.
     */
    void setupUI() {
        set_default_size(WINDOW_WIDTH, WINDOW_HEIGHT);
        set_title("Contest maker");
        set_position(Gtk::WIN_POS_CENTER);

        vbox.set_spacing(10);
        vbox.set_margin_top(10);
        vbox.set_margin_bottom(10);
        vbox.set_margin_left(10);
        vbox.set_margin_right(10);

        // Contest name
        vbox.pack_start(contestNameLabel, Gtk::PACK_SHRINK);
        vbox.pack_start(contestNameEntry, Gtk::PACK_SHRINK);

        // Problem count
        vbox.pack_start(problemCountLabel, Gtk::PACK_SHRINK);
        initializeProblemCountSelector();
        vbox.pack_start(problemCountSelector, Gtk::PACK_SHRINK);

        // Directory path
        vbox.pack_start(directoryLabel, Gtk::PACK_SHRINK);
        vbox.pack_start(directoryPicker, Gtk::PACK_SHRINK);

        // Checkboxes
        vbox.pack_start(openInVSCodeOption, Gtk::PACK_SHRINK);
        vbox.pack_start(initGitRepoOption, Gtk::PACK_SHRINK);

        // Create
        vbox.pack_start(createButton, Gtk::PACK_SHRINK);

        add(vbox);
        show_all_children();
    }

    /**
     * @brief –ü—ñ–¥–∫–ª—é—á–∞—î —Å–∏–≥–Ω–∞–ª–∏ –∫–Ω–æ–ø–æ–∫ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤.
     */
    void connectSignals() {
        createButton.signal_clicked().connect(
            sigc::mem_fun(*this, &MainWindow::onCreateButtonPress)
        );
        directoryPicker.signal_clicked().connect(
            sigc::mem_fun(*this, &MainWindow::onFolderButtonPress)
        );
    }

    /**
     * @brief –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–µ–ª–µ–∫—Ç–æ—Ä –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–¥–∞—á
     */
    void initializeProblemCountSelector() {
        for (char c = 'A'; c <= 'Z'; c++) {
            problemCountSelector.append(string{c});
        }
        problemCountSelector.set_active(DEFAULT_COMBO_SELECTION);
    }

    /**
     * @brief –í–∏–∫–ª–∏–∫–∞—î —Ñ–∞–π–ª–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏.
     * –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É - –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö —à–ª—è—Ö —É 'folderName' —ñ –æ–Ω–æ–≤–ª—é—î —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏.
     */
    void onFolderButtonPress() {
        auto dialog = Gtk::FileChooserNative::create(
            "–û–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é",
            *this,
            Gtk::FILE_CHOOSER_ACTION_SELECT_FOLDER,
            "_Select",
            "_Cancel"
        );

        if (dialog -> run() == Gtk::RESPONSE_ACCEPT) {
            folderName = dialog -> get_filename();
            directoryPicker.set_label("üóÇ " + fs::path(folderName).filename().string());
        }
    }

    /**
     * @brief –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–≤–æ—Ä–∏—Ç–∏".
     */
    void onCreateButtonPress() {
        try {
            const string contestName = contestNameEntry.get_text();
            const string maxDir = problemCountSelector.get_active_text();

            validateFormInputs(contestName);

            ContestStructureBuilder builder(contestName, maxDir[0], fs::path(folderName));
            builder.build();

            showSuccessDialog("–£—Å–ø—ñ—Ö!", "–ü–∞–ø–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ.");

            if (openInVSCodeOption.get_active()) {
                const fs::path fullPath = fs::path(folderName) / contestName;
                SystemHelper::openInCode(fullPath.string());
            }

            if (initGitRepoOption.get_active()) {
                const fs::path fullPath = fs::path(folderName) / contestName;
                SystemHelper::createGitRepo(fullPath.string());
            }

            resetForm();
        } 
        catch (const exception& e) {
            showErrorDialog("–ü–æ–º–∏–ª–∫–∞", e.what());
        }

    }

    /**
     * @brief –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
     * @throws invalid_argument –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –∞–±–æ —à–ª—è—Ö –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω—ñ.
     */
    void validateFormInputs(const string& contestName) const {
        if (contestName.empty()) {
            throw invalid_argument("–í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤—É –∫–æ–Ω—Ç–µ—Å—Ç—É");
        }

        if (folderName.empty()) {
            throw invalid_argument("–í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó");
        }

        static const string FORBIDDEN_CHARS = "<>:\"/\\|?*";
        for (char c : contestName) {
            if (FORBIDDEN_CHARS.find(c) != string::npos) {
                throw invalid_argument("–ù–∞–∑–≤–∞ –∫–æ–Ω—Ç–µ—Å—Ç—É –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π —Å–∏–º–≤–æ–ª: " + c);
            }
        }
    }

    /**
     * @brief –û—á–∏—â—É—î –ø–æ–ª—è –¥–æ —ó—Ö –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å.
     */
    void resetForm() {
        contestNameEntry.set_text("");
        folderName.clear();
        problemCountSelector.set_active(DEFAULT_COMBO_SELECTION);
        directoryPicker.set_label("–û–±—Ä–∞—Ç–∏ –ø–∞–ø–∫—É");
        openInVSCodeOption.set_active(false);
        initGitRepoOption.set_active(false);
    }

    /**
     * @brief –ü–æ–∫–∞–∑—É—î –¥—ñ–∞–ª–æ–≥ –ø–æ–º–∏–ª–∫–∏.
     * @param title –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥—ñ–∞–ª–æ–≥—É.
     * @param subTitle –ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏.
     */
    void showErrorDialog(const string& title, const string& subTitle) {
        Gtk::MessageDialog dialog(*this, title, false, Gtk::MESSAGE_ERROR, Gtk::BUTTONS_OK);
        dialog.set_secondary_text(subTitle);
        dialog.run();
    }

    /**
     * @brief –ü–æ–∫–∞–∑—É—î –¥—ñ–∞–ª–æ–≥ —É—Å–ø—ñ—Ö—É.
     * @param title –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥—ñ–∞–ª–æ–≥—É.
     * @param subTitle –ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏.
     */
    void showSuccessDialog(const string& title, const string& subTitle) {
        Gtk::MessageDialog dialog(*this, title, false, Gtk::MESSAGE_INFO);
        dialog.set_secondary_text(subTitle);
        dialog.run();
    }

};

int main(int argc, char *argv[]) {
    try {
        auto app = Gtk::Application::create(argc, argv, "com.noinsts.contest-maker");
        MainWindow window;
        return app -> run(window);
    } 
    catch (const exception& e) {
        cerr << "Application error: " << e.what() << endl;
        return 1;
    }
}
